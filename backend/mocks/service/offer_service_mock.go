// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/service/offer_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/service/offer_service.go -destination=./mocks/service/offer_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOfferService is a mock of OfferService interface.
type MockOfferService struct {
	ctrl     *gomock.Controller
	recorder *MockOfferServiceMockRecorder
	isgomock struct{}
}

// MockOfferServiceMockRecorder is the mock recorder for MockOfferService.
type MockOfferServiceMockRecorder struct {
	mock *MockOfferService
}

// NewMockOfferService creates a new mock instance.
func NewMockOfferService(ctrl *gomock.Controller) *MockOfferService {
	mock := &MockOfferService{ctrl: ctrl}
	mock.recorder = &MockOfferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferService) EXPECT() *MockOfferServiceMockRecorder {
	return m.recorder
}

// ClearOffer mocks base method.
func (m *MockOfferService) ClearOffer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearOffer")
}

// ClearOffer indicates an expected call of ClearOffer.
func (mr *MockOfferServiceMockRecorder) ClearOffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearOffer", reflect.TypeOf((*MockOfferService)(nil).ClearOffer))
}

// GetOffer mocks base method.
func (m *MockOfferService) GetOffer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOffer indicates an expected call of GetOffer.
func (mr *MockOfferServiceMockRecorder) GetOffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffer", reflect.TypeOf((*MockOfferService)(nil).GetOffer))
}

// IsOffer mocks base method.
func (m *MockOfferService) IsOffer() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOffer")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOffer indicates an expected call of IsOffer.
func (mr *MockOfferServiceMockRecorder) IsOffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOffer", reflect.TypeOf((*MockOfferService)(nil).IsOffer))
}

// IsOfferID mocks base method.
func (m *MockOfferService) IsOfferID(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOfferID", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOfferID indicates an expected call of IsOfferID.
func (mr *MockOfferServiceMockRecorder) IsOfferID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOfferID", reflect.TypeOf((*MockOfferService)(nil).IsOfferID), id)
}

// SetOffer mocks base method.
func (m *MockOfferService) SetOffer(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOffer", id)
}

// SetOffer indicates an expected call of SetOffer.
func (mr *MockOfferServiceMockRecorder) SetOffer(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOffer", reflect.TypeOf((*MockOfferService)(nil).SetOffer), id)
}

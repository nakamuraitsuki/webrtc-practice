// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/repository/websocket_repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/repository/websocket_repository.go -destination=./mocks/repository/websocket_repository_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIWebsocketRepository is a mock of IWebsocketRepository interface.
type MockIWebsocketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIWebsocketRepositoryMockRecorder
	isgomock struct{}
}

// MockIWebsocketRepositoryMockRecorder is the mock recorder for MockIWebsocketRepository.
type MockIWebsocketRepositoryMockRecorder struct {
	mock *MockIWebsocketRepository
}

// NewMockIWebsocketRepository creates a new mock instance.
func NewMockIWebsocketRepository(ctrl *gomock.Controller) *MockIWebsocketRepository {
	mock := &MockIWebsocketRepository{ctrl: ctrl}
	mock.recorder = &MockIWebsocketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWebsocketRepository) EXPECT() *MockIWebsocketRepositoryMockRecorder {
	return m.recorder
}

// AddCandidate mocks base method.
func (m *MockIWebsocketRepository) AddCandidate(id string, candidate []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCandidate", id, candidate)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCandidate indicates an expected call of AddCandidate.
func (mr *MockIWebsocketRepositoryMockRecorder) AddCandidate(id, candidate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCandidate", reflect.TypeOf((*MockIWebsocketRepository)(nil).AddCandidate), id, candidate)
}

// CreateClient mocks base method.
func (m *MockIWebsocketRepository) CreateClient(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockIWebsocketRepositoryMockRecorder) CreateClient(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockIWebsocketRepository)(nil).CreateClient), id)
}

// DeleteClient mocks base method.
func (m *MockIWebsocketRepository) DeleteClient(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockIWebsocketRepositoryMockRecorder) DeleteClient(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockIWebsocketRepository)(nil).DeleteClient), id)
}

// ExistsCandidateByID mocks base method.
func (m *MockIWebsocketRepository) ExistsCandidateByID(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsCandidateByID", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsCandidateByID indicates an expected call of ExistsCandidateByID.
func (mr *MockIWebsocketRepositoryMockRecorder) ExistsCandidateByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsCandidateByID", reflect.TypeOf((*MockIWebsocketRepository)(nil).ExistsCandidateByID), id)
}

// GetCandidatesByID mocks base method.
func (m *MockIWebsocketRepository) GetCandidatesByID(id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidatesByID", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidatesByID indicates an expected call of GetCandidatesByID.
func (mr *MockIWebsocketRepositoryMockRecorder) GetCandidatesByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidatesByID", reflect.TypeOf((*MockIWebsocketRepository)(nil).GetCandidatesByID), id)
}

// GetSDPByID mocks base method.
func (m *MockIWebsocketRepository) GetSDPByID(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSDPByID", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSDPByID indicates an expected call of GetSDPByID.
func (mr *MockIWebsocketRepositoryMockRecorder) GetSDPByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSDPByID", reflect.TypeOf((*MockIWebsocketRepository)(nil).GetSDPByID), id)
}

// SaveCandidate mocks base method.
func (m *MockIWebsocketRepository) SaveCandidate(id string, candidate []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCandidate", id, candidate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCandidate indicates an expected call of SaveCandidate.
func (mr *MockIWebsocketRepositoryMockRecorder) SaveCandidate(id, candidate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCandidate", reflect.TypeOf((*MockIWebsocketRepository)(nil).SaveCandidate), id, candidate)
}

// SaveSDP mocks base method.
func (m *MockIWebsocketRepository) SaveSDP(id, sdp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSDP", id, sdp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSDP indicates an expected call of SaveSDP.
func (mr *MockIWebsocketRepositoryMockRecorder) SaveSDP(id, sdp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSDP", reflect.TypeOf((*MockIWebsocketRepository)(nil).SaveSDP), id, sdp)
}

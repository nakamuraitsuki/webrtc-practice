// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/websocket_usecase.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/websocket_usecase.go -destination=./mocks/usecase/websocket_usecase_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	entity "example.com/webrtc-practice/internal/domain/entity"
	service "example.com/webrtc-practice/internal/domain/service"
	gomock "go.uber.org/mock/gomock"
)

// MockIWebsocketUsecaseInterface is a mock of IWebsocketUsecaseInterface interface.
type MockIWebsocketUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIWebsocketUsecaseInterfaceMockRecorder
	isgomock struct{}
}

// MockIWebsocketUsecaseInterfaceMockRecorder is the mock recorder for MockIWebsocketUsecaseInterface.
type MockIWebsocketUsecaseInterfaceMockRecorder struct {
	mock *MockIWebsocketUsecaseInterface
}

// NewMockIWebsocketUsecaseInterface creates a new mock instance.
func NewMockIWebsocketUsecaseInterface(ctrl *gomock.Controller) *MockIWebsocketUsecaseInterface {
	mock := &MockIWebsocketUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockIWebsocketUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWebsocketUsecaseInterface) EXPECT() *MockIWebsocketUsecaseInterfaceMockRecorder {
	return m.recorder
}

// Answer mocks base method.
func (m *MockIWebsocketUsecaseInterface) Answer(message entity.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Answer", message)
}

// Answer indicates an expected call of Answer.
func (mr *MockIWebsocketUsecaseInterfaceMockRecorder) Answer(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Answer", reflect.TypeOf((*MockIWebsocketUsecaseInterface)(nil).Answer), message)
}

// Candidate mocks base method.
func (m *MockIWebsocketUsecaseInterface) Candidate(message entity.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Candidate", message)
}

// Candidate indicates an expected call of Candidate.
func (mr *MockIWebsocketUsecaseInterfaceMockRecorder) Candidate(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Candidate", reflect.TypeOf((*MockIWebsocketUsecaseInterface)(nil).Candidate), message)
}

// CandidateAdd mocks base method.
func (m *MockIWebsocketUsecaseInterface) CandidateAdd(message entity.Message) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CandidateAdd", message)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CandidateAdd indicates an expected call of CandidateAdd.
func (mr *MockIWebsocketUsecaseInterfaceMockRecorder) CandidateAdd(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CandidateAdd", reflect.TypeOf((*MockIWebsocketUsecaseInterface)(nil).CandidateAdd), message)
}

// Connect mocks base method.
func (m *MockIWebsocketUsecaseInterface) Connect(message entity.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect", message)
}

// Connect indicates an expected call of Connect.
func (mr *MockIWebsocketUsecaseInterfaceMockRecorder) Connect(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIWebsocketUsecaseInterface)(nil).Connect), message)
}

// ListenForMessages mocks base method.
func (m *MockIWebsocketUsecaseInterface) ListenForMessages(conn service.WebSocketConnection) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenForMessages", conn)
}

// ListenForMessages indicates an expected call of ListenForMessages.
func (mr *MockIWebsocketUsecaseInterfaceMockRecorder) ListenForMessages(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForMessages", reflect.TypeOf((*MockIWebsocketUsecaseInterface)(nil).ListenForMessages), conn)
}

// Offer mocks base method.
func (m *MockIWebsocketUsecaseInterface) Offer(message entity.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Offer", message)
}

// Offer indicates an expected call of Offer.
func (mr *MockIWebsocketUsecaseInterfaceMockRecorder) Offer(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offer", reflect.TypeOf((*MockIWebsocketUsecaseInterface)(nil).Offer), message)
}

// ProcessMessage mocks base method.
func (m *MockIWebsocketUsecaseInterface) ProcessMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessMessage")
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockIWebsocketUsecaseInterfaceMockRecorder) ProcessMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockIWebsocketUsecaseInterface)(nil).ProcessMessage))
}

// RegisterClient mocks base method.
func (m *MockIWebsocketUsecaseInterface) RegisterClient(conn service.WebSocketConnection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClient", conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterClient indicates an expected call of RegisterClient.
func (mr *MockIWebsocketUsecaseInterfaceMockRecorder) RegisterClient(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClient", reflect.TypeOf((*MockIWebsocketUsecaseInterface)(nil).RegisterClient), conn)
}

// SendCandidate mocks base method.
func (m *MockIWebsocketUsecaseInterface) SendCandidate(message entity.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendCandidate", message)
}

// SendCandidate indicates an expected call of SendCandidate.
func (mr *MockIWebsocketUsecaseInterfaceMockRecorder) SendCandidate(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCandidate", reflect.TypeOf((*MockIWebsocketUsecaseInterface)(nil).SendCandidate), message)
}
